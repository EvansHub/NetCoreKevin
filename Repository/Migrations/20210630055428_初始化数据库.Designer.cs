// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Database;

namespace Repository.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20210630055428_初始化数据库")]
    partial class 初始化数据库
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Repository.Database.TAlipayKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("AesKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("aeskey")
                        .HasComment("支付宝加密解密密钥");

                    b.Property<string>("AlipayPublicKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("alipaypublickey")
                        .HasComment("支付宝公钥");

                    b.Property<string>("AppId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("appid")
                        .HasComment("AppId");

                    b.Property<string>("AppPrivateKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("appprivatekey")
                        .HasComment("App私钥");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.HasKey("Id");

                    b.ToTable("t_alipaykey");

                    b
                        .HasComment("支付宝平台账户配置表");
                });

            modelBuilder.Entity("Repository.Database.TArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("abstract")
                        .HasComment("摘要");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("categoryid")
                        .HasComment("类别ID");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int")
                        .HasColumnName("clickcount")
                        .HasComment("点击数");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content")
                        .HasComment("内容");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<bool>("IsDisplay")
                        .HasColumnType("bit")
                        .HasColumnName("isdisplay")
                        .HasComment("是否显示");

                    b.Property<bool>("IsRecommend")
                        .HasColumnType("bit")
                        .HasColumnName("isrecommend")
                        .HasComment("是否推荐");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title")
                        .HasComment("标题");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_article");

                    b
                        .HasComment("文章表");
                });

            modelBuilder.Entity("Repository.Database.TCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("channelid")
                        .HasComment("频道ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasComment("栏目名目");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parentid")
                        .HasComment("父级栏目ID");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("t_category");

                    b
                        .HasComment("栏目信息表");
                });

            modelBuilder.Entity("Repository.Database.TChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasComment("频道名称");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_channel");

                    b
                        .HasComment("频道信息表");
                });

            modelBuilder.Entity("Repository.Database.TCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count")
                        .HasComment("计数");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tag")
                        .HasComment("标记");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatetime")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.ToTable("t_count");

                    b
                        .HasComment("计数表");
                });

            modelBuilder.Entity("Repository.Database.TDictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("key")
                        .HasComment("键");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value")
                        .HasComment("值");

                    b.HasKey("Id");

                    b.ToTable("t_dictionary");

                    b
                        .HasComment("字典信息表");
                });

            modelBuilder.Entity("Repository.Database.TFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasComment("文件名称");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("path")
                        .HasComment("保存路径");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sign")
                        .HasComment("标记");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("table")
                        .HasComment("外链表名");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tableid")
                        .HasComment("外链表ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_file");

                    b
                        .HasComment("文件表");
                });

            modelBuilder.Entity("Repository.Database.TFileGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fileid")
                        .HasComment("文件ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<bool>("Isfull")
                        .HasColumnType("bit")
                        .HasColumnName("isfull")
                        .HasComment("是否已完整传输");

                    b.Property<bool>("Issynthesis")
                        .HasColumnType("bit")
                        .HasColumnName("issynthesis")
                        .HasComment("合成状态");

                    b.Property<int>("Slicing")
                        .HasColumnType("int")
                        .HasColumnName("slicing")
                        .HasComment("分片数");

                    b.Property<string>("Unique")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unique")
                        .HasComment("文件唯一值");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatetime")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_filegroup");

                    b
                        .HasComment("文件分片上传状态记录表");
                });

            modelBuilder.Entity("Repository.Database.TFileGroupFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fileid")
                        .HasComment("文件ID");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index")
                        .HasComment("文件索引值");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("path")
                        .HasComment("文件保存路径");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_filegroupfile");

                    b
                        .HasComment("分片上传时的切片文件记录表");
                });

            modelBuilder.Entity("Repository.Database.TGuidToInt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid")
                        .HasComment("Guid 字符串");

                    b.HasKey("Id");

                    b.ToTable("t_guidtoint");
                });

            modelBuilder.Entity("Repository.Database.TImgBaiduAI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fileid")
                        .HasComment("图片文件ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("result")
                        .HasComment("接口返回值");

                    b.Property<string>("Unique")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unique")
                        .HasComment("图片库唯一标识符");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatetime")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("t_imgbaiduai");

                    b
                        .HasComment("产品图片对应百度AI信息表");
                });

            modelBuilder.Entity("Repository.Database.TLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasComment("名称");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url")
                        .HasComment("地址");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("t_link");

                    b
                        .HasComment("友情链接表");
                });

            modelBuilder.Entity("Repository.Database.TLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content")
                        .HasComment("内容");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sign")
                        .HasComment("标记");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type")
                        .HasComment("类型");

                    b.HasKey("Id");

                    b.ToTable("t_log");

                    b
                        .HasComment("日志表");
                });

            modelBuilder.Entity("Repository.Database.TOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("orderno")
                        .HasComment("订单号");

                    b.Property<decimal>("PayPrice")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("payprice")
                        .HasComment("实际支付金额");

                    b.Property<bool>("PayState")
                        .HasColumnType("bit")
                        .HasColumnName("paystate")
                        .HasComment("支付状态");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("paytime")
                        .HasComment("支付时间");

                    b.Property<string>("PayType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("paytype")
                        .HasComment("支付方式");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("price")
                        .HasComment("价格");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("serialno")
                        .HasComment("支付流水号");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state")
                        .HasComment("订单状态");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type")
                        .HasComment("订单类型");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatetime")
                        .HasComment("更新时间");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateuserid")
                        .HasComment("编辑人ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_order");

                    b
                        .HasComment("订单表");
                });

            modelBuilder.Entity("Repository.Database.TOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number")
                        .HasComment("产品数量");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderid")
                        .HasComment("订单ID");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productid")
                        .HasComment("产品ID");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("t_orderdetail");

                    b
                        .HasComment("订单详情表");
                });

            modelBuilder.Entity("Repository.Database.TProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("detail")
                        .HasComment("描述");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasComment("名称");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("price")
                        .HasComment("价格");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sku")
                        .HasComment("SKU");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatetime")
                        .HasComment("更新时间");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateuserid")
                        .HasComment("编辑人ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("t_product");

                    b
                        .HasComment("产品表");
                });

            modelBuilder.Entity("Repository.Database.TRegionArea", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("area")
                        .HasComment("区域名称");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityid")
                        .HasComment("所属城市ID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("t_regionarea");

                    b
                        .HasComment("区域信息表");
                });

            modelBuilder.Entity("Repository.Database.TRegionCity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city")
                        .HasComment("城市名称");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasColumnName("provinceid")
                        .HasComment("所属省份ID");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("t_regioncity");

                    b
                        .HasComment("城市信息表");
                });

            modelBuilder.Entity("Repository.Database.TRegionProvince", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("province")
                        .HasComment("省份");

                    b.HasKey("Id");

                    b.ToTable("t_regionprovince");

                    b
                        .HasComment("省份信息表");
                });

            modelBuilder.Entity("Repository.Database.TRegionTown", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("areaid")
                        .HasComment("所属区域ID");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("town")
                        .HasComment("街道名称");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("t_regiontown");
                });

            modelBuilder.Entity("Repository.Database.TRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasComment("角色名称");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks")
                        .HasComment("备注信息");

                    b.HasKey("Id");

                    b.ToTable("t_role");

                    b
                        .HasComment("角色信息表");
                });

            modelBuilder.Entity("Repository.Database.TSign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createuserid")
                        .HasComment("创建人ID");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteuserid")
                        .HasComment("删除人ID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sign")
                        .HasComment("自定义标记");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("table")
                        .HasComment("外链表名称");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tableid")
                        .HasComment("外链记录ID");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("TableId");

                    b.ToTable("t_sign");

                    b
                        .HasComment("点赞或标记喜欢记录表");
                });

            modelBuilder.Entity("Repository.Database.TUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email")
                        .HasComment("邮箱");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasComment("用户名");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nickname")
                        .HasComment("昵称");

                    b.Property<string>("PassWord")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password")
                        .HasComment("密码");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone")
                        .HasComment("手机号");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleid")
                        .HasComment("角色ID");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatetime")
                        .HasComment("更新时间");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("t_user");

                    b
                        .HasComment("用户表");
                });

            modelBuilder.Entity("Repository.Database.TUserBindAlipay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<Guid>("AlipayKeyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("alipaykeyid")
                        .HasComment("关联支付宝账户");

                    b.Property<string>("AlipayUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("alipayuserid")
                        .HasComment("支付宝UserId");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("AlipayKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("t_userbindalipay");

                    b
                        .HasComment("用户和支付宝绑定关系表");
                });

            modelBuilder.Entity("Repository.Database.TUserBindWeixin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid")
                        .HasComment("用户ID");

                    b.Property<Guid>("WeiXinKeyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("weixinkeyid")
                        .HasComment("关联微信账户");

                    b.Property<string>("WeiXinOpenId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("weixinopenid")
                        .HasComment("微信OpenId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WeiXinKeyId");

                    b.ToTable("t_userbindweixin");

                    b
                        .HasComment("用户和微信绑定关系表");
                });

            modelBuilder.Entity("Repository.Database.TUserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address")
                        .HasComment("地址详细信息");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company")
                        .HasComment("公司名称");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position")
                        .HasComment("职务");

                    b.Property<string>("QQ")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("qq")
                        .HasComment("QQ");

                    b.Property<int>("RegionAreaId")
                        .HasColumnType("int")
                        .HasColumnName("regionareaid")
                        .HasComment("地址区域ID");

                    b.Property<bool?>("Sex")
                        .HasColumnType("bit")
                        .HasColumnName("sex")
                        .HasComment("性别");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signature")
                        .HasComment("个性签名");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid")
                        .HasComment("用户ID");

                    b.Property<string>("WeChat")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("wechat")
                        .HasComment("微信号");

                    b.HasKey("Id");

                    b.HasIndex("RegionAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("t_userinfo");

                    b
                        .HasComment("用户详细信息表");
                });

            modelBuilder.Entity("Repository.Database.TUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<Guid?>("LastId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("lastid")
                        .HasComment("上一次有效的 tokenid");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token")
                        .HasComment("Token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("t_usertoken");

                    b
                        .HasComment("用户Token记录表");
                });

            modelBuilder.Entity("Repository.Database.TWebInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("标识ID");

                    b.Property<string>("FootCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("footcode")
                        .HasComment("网站底部代码");

                    b.Property<string>("ManagerAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manageraddress")
                        .HasComment("管理者地址");

                    b.Property<string>("ManagerEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manageremail")
                        .HasComment("管理者邮箱");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("managername")
                        .HasComment("管理者名称");

                    b.Property<string>("ManagerPhone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("managerphone")
                        .HasComment("管理者电话");

                    b.Property<string>("RecordNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recordnumber")
                        .HasComment("网站备案号");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("seodescription")
                        .HasComment("SEO描述");

                    b.Property<string>("SeoKeyWords")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("seokeywords")
                        .HasComment("SEO关键字");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("seotitle")
                        .HasComment("SEO标题");

                    b.Property<string>("WebUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("weburl")
                        .HasComment("网站域名");

                    b.HasKey("Id");

                    b.ToTable("t_webinfo");

                    b
                        .HasComment("网站信息配置表");
                });

            modelBuilder.Entity("Repository.Database.TWeiXinKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("主键标识ID");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("createtime")
                        .HasComment("创建时间");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletetime")
                        .HasComment("删除时间");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isdelete")
                        .HasComment("是否删除");

                    b.Property<string>("MchId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mchid")
                        .HasComment("MchId");

                    b.Property<string>("MchKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mchkey")
                        .HasComment("MchKey");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks")
                        .HasComment("备注");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("sort")
                        .HasComment("排序");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type")
                        .HasComment("AppId 类型，['App','MiniApp','H5','Native']");

                    b.Property<string>("WxAppId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("wxappid")
                        .HasComment("WxAppId");

                    b.Property<string>("WxAppSecret")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("wxappsecret")
                        .HasComment("WxAppSecret");

                    b.HasKey("Id");

                    b.ToTable("t_weixinkey");

                    b
                        .HasComment("微信商户平台账户配置表");
                });

            modelBuilder.Entity("Repository.Database.TArticle", b =>
                {
                    b.HasOne("Repository.Database.TCategory", "Category")
                        .WithMany("TArticle")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TCategory", b =>
                {
                    b.HasOne("Repository.Database.TChannel", "Channel")
                        .WithMany("TCategory")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Channel");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Repository.Database.TChannel", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TFile", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TFileGroup", b =>
                {
                    b.HasOne("Repository.Database.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Repository.Database.TFileGroupFile", b =>
                {
                    b.HasOne("Repository.Database.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Repository.Database.TImgBaiduAI", b =>
                {
                    b.HasOne("Repository.Database.TFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Repository.Database.TLink", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TOrder", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Repository.Database.TOrderDetail", b =>
                {
                    b.HasOne("Repository.Database.TOrder", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Database.TProduct", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Database.TUser", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Repository.Database.TRegionArea", b =>
                {
                    b.HasOne("Repository.Database.TRegionCity", "City")
                        .WithMany("TRegionArea")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Repository.Database.TRegionCity", b =>
                {
                    b.HasOne("Repository.Database.TRegionProvince", "Province")
                        .WithMany("TRegionCity")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Repository.Database.TRegionTown", b =>
                {
                    b.HasOne("Repository.Database.TRegionArea", "Area")
                        .WithMany("TRegionTown")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Repository.Database.TSign", b =>
                {
                    b.HasOne("Repository.Database.TUser", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("Repository.Database.TUser", b =>
                {
                    b.HasOne("Repository.Database.TRole", "Role")
                        .WithMany("RoleUserList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repository.Database.TUserBindAlipay", b =>
                {
                    b.HasOne("Repository.Database.TAlipayKey", "AlipayKey")
                        .WithMany()
                        .HasForeignKey("AlipayKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlipayKey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TUserBindWeixin", b =>
                {
                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TWeiXinKey", "WeiXinKey")
                        .WithMany()
                        .HasForeignKey("WeiXinKeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WeiXinKey");
                });

            modelBuilder.Entity("Repository.Database.TUserInfo", b =>
                {
                    b.HasOne("Repository.Database.TRegionArea", "RegionArea")
                        .WithMany()
                        .HasForeignKey("RegionAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegionArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TUserToken", b =>
                {
                    b.HasOne("Repository.Database.TUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Database.TCategory", b =>
                {
                    b.Navigation("TArticle");
                });

            modelBuilder.Entity("Repository.Database.TChannel", b =>
                {
                    b.Navigation("TCategory");
                });

            modelBuilder.Entity("Repository.Database.TOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Database.TRegionArea", b =>
                {
                    b.Navigation("TRegionTown");
                });

            modelBuilder.Entity("Repository.Database.TRegionCity", b =>
                {
                    b.Navigation("TRegionArea");
                });

            modelBuilder.Entity("Repository.Database.TRegionProvince", b =>
                {
                    b.Navigation("TRegionCity");
                });

            modelBuilder.Entity("Repository.Database.TRole", b =>
                {
                    b.Navigation("RoleUserList");
                });
#pragma warning restore 612, 618
        }
    }
}
